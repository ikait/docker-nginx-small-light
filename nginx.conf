worker_processes  4;
env OMP_NUM_THREADS=1;

events {
    worker_connections  512;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    tcp_nopush    on;
    keepalive_timeout 120;
    server_tokens off;
    add_header Cache-Control no-cache;
    lua_package_path "/src/lua-resty-string/lib/?.lua;;";

    server {
        listen 80;
        server_name localhost;

        send_timeout 120;

        location / {
          root   html;
          index  index.html index.htm;
        }

        location /favicon.ico {
          empty_gif;
          access_log    off;
          log_not_found off;
        }

        location ~ ^/articles/image/(.+)/(.+)/(.+)/(.+)\.(jpg|jpeg|webp)$ {
          set $filename $1;
          set $param1   $2;
          set $param2   $3;
          set $hash     $4;
          set $ext      $5;
          access_by_lua '
            local str = require "resty.string"
            local resty_md5 = require "resty.md5"
            local md5 = resty_md5:new()
            md5:update(ngx.var.filename)
            md5:update(ngx.var.param1)
            md5:update(ngx.var.param2)
            md5:update("hogehoge")
            local hash = str.to_hex(md5:final())
            if hash ~= ngx.var.hash then
              ngx.exit(401)
            end
          ';
          set_by_lua $res '
            local str = require "resty.string"
            dw,dh = string.match(ngx.var.param1,"(%d+)x(%d+)$")
            if dw and dh then
              cw,ch = string.match(ngx.var.param2,"(%d+)x(%d+)c$")
            else
              cw,ch = string.match(ngx.var.param1,"(%d+)x(%d+)c$")
              dw,dh = string.match(ngx.var.param2,"(%d+)x(%d+)$")
            end
            return string.format("%s%s%s%s%s%s%s%s%s%s%s%s%s","/small_light(q=95,jpeghint=y,da=s,dw=",dw,",dh=",dh,",cw=",cw,",ch=",ch,",of=",ngx.var.ext,")/img/",ngx.var.filename,".jpg")
          ';
          proxy_pass http://127.0.0.1:8080/$res;
        }

        location ~ ^/articles/image/(.+)/(.+)/(.+)\.(jpg|jpeg|webp)$ {
          set $filename $1;
          set $param    $2;
          set $hash     $3;
          set $ext      $4;
          access_by_lua '
            local str = require "resty.string"
            local resty_md5 = require "resty.md5"
            local md5 = resty_md5:new()
            md5:update(ngx.var.filename)
            md5:update(ngx.var.param)
            md5:update("hogehoge")
            local hash = str.to_hex(md5:final())
            if hash ~= ngx.var.hash then
              ngx.exit(401)
            end
          ';
          set_by_lua $res '
            local str = require "resty.string"
            dw,dh = string.match(ngx.var.param,"(%d+)x(%d+)$")
            if not dw or not dh then
              cw,ch = string.match(ngx.var.param,"(%d+)x(%d+)c$")
              return string.format("%s%s%s%s%s%s%s%s%s%s","small_light(q=95,jpeghint=y,da=s",",cw=",cw,",ch=",ch,",of=",ngx.var.ext,")/img/",ngx.var.filename,".jpg")
            else
              return string.format("%s%s%s%s%s%s%s%s%s%s","small_light(q=95,jpeghint=y,da=s",",dw=",dw,",dh=",dh,",of=",ngx.var.ext,")/img/",ngx.var.filename,".jpg")
            end
          ';
          proxy_pass http://127.0.0.1:8080/$res;
        }


        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen 8080;
        server_name     localhost;

        small_light     on;
        small_light_buffer 1m;
        send_timeout 120;

        location ~ ^/small_light[^/]*/(.+)$ {
            set $file $1;
            rewrite ^ /$file;
        }

        location /img/ {
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            proxy_pass http://s3-ap-northeast-1.amazonaws.com/dev-nikkei-images/;
            internal;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
